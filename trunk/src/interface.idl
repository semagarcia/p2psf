/**
* Modulo cliente. Se desarrolla todo el codigo necesario para la comunicación
* entre los usuarios y el almacenamiento del estado de los ficheros localmente.
*/
module cliente {

	// Estructura para almacenar la informacion de los archivos.
	struct infoArchivo {
		string ruta;
		string nombre;
		long long tam;
		long long checksum;
	};

	// Estructura para almacenar las partes de un archivo que el usuario posee o desea descargar.
	struct parteArchivo {
		long long inicio;
		long long fin;
		boolean pedido;
		boolean descargado;
	};

	typedef sequence <parteArchivo> vPartes;

	// Estructura para que los usuarios envíen la información de sus archivos al coordinador.
	struct EstrArchivo {
		infoArchivo info;
		vPartes partes;
	};

	// Definicion de array de EstrArchivos.
	typedef sequence <EstrArchivo> estrArchivos;

	// Secuencia de bytes que los usuarios devolveran como respuesta a las peticiones de archivos.
	typedef sequence <octet> vByte;

	// Sirviente que proporciona partes de un archivo a los usuarios que se la solicitan.
	interface Usuario {
		// Método que devuelve la parte solicitada de un archivo.
		vByte solicitarParte(in string nombre, in long long inicio, in long long fin);
	};
};


/*
* Modulo coordinador. Contiene el codigo necesario para almacenar el estado de los archivos en la red y
* facilita a los clientes la informacion de dichos archivos para posibilitar su descarga de otros usuarios.
*/
module coordinador {
	//Definición de array de int.
	typedef sequence <long> vInt;
	
	// Creado por el coordinador. Mantiene información de los archivos de la red.
	interface Archivo {
		readonly attribute string nombre;
		readonly attribute long long tam;
		readonly attribute long long checksum;

		void insertarSeed(in long id);
		void insertarPeer(in long id, in cliente::vPartes partes);
		void actualizarPartes(in long id, in cliente::vPartes partes);
		void eliminarSeed(in long id);
		void eliminarPeer(in long id);
		vInt getSeeds();
		vInt getPeers();
		cliente::vPartes getPartes(in long id); // Devuelve las partes que posee el usuario con identificador id
	};

	// Sirviente que permite a los usuarios conectarse a la red, desconectarse y recuperar informacion sobre los archivos.
	interface Coordinador{
		long conectar(in cliente::estrArchivos eas, in cliente::Usuario usuario);
		void desconectar(in cliente::estrArchivos eas, in long idUsuario);
		void anyadirArchivos(in cliente::estrArchivos eas, in long idUsuario);
		void eliminarArchivos(in cliente::estrArchivos eas, in long idUsuario);
		Archivo buscar(in string nombre);
		cliente::Usuario getUsuario(in long id);
	};
};



