/**
* Parte cliente, serían los N usuarios que interactuarán, en el inicio de la
* conexión, con la parte servidora (concretamente, con el Coordinador).
*/
module cliente {
	typedef sequence <long long> vLong;

	// Estructura para que los usuarios envíen la información de sus archivos al coordinador.
	struct EstrArchivo {
		string nombre;
		long long tam;
		long long checksum;
		vLong partes;
	};

	// Secuencia de archivos
	typedef sequence <EstrArchivo> estrArchivos;

	interface Usuario {
		string saluda();
	};
};

module coordinador {
	//Definición de array de int
	typedef sequence <long> vInt;
	
	// Creado por el coordinador. Mantiene información de los archivos de la red.
	interface Archivo {
		readonly attribute string nombre;
		readonly attribute long long tam;
		readonly attribute long long checksum;

		void insertarSeed(in long id);
		void insertarPeer(in long id, in cliente::vLong partes);
		void eliminarSeed(in long id);
		void eliminarPeer(in long id);
		vInt getSeeds();
		vInt getPeers();
		cliente::vLong getPartes(in long id);
	};


	interface Coordinador{
		long conectar(in cliente::estrArchivos eas, in string usuario);
		void desconectar(in cliente::estrArchivos eas, in long idUsuario);
		void anyadirArchivos(in cliente::estrArchivos eas, in long idUsuario);
		void eliminarArchivos(in cliente::estrArchivos eas, in long idUsuario);
		Archivo buscar(in string nombre);
		string getReferencia(in long id);
	};
};



