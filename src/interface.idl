/**
* Parte cliente, serían los N usuarios que interactuarán, en el inicio de la
* conexión, con la parte servidora (concretamente, con el Coordinador).
*/
module cliente {
	//typedef sequence <long long> vLong;

	struct infoArchivo {
		string ruta;  // SE PUEDE QUITAR DE AQUÍ E IMPLEMENTARLO EN EL INTERIOR UNA VEZ GENERADO EL CODIGO
		string nombre;
		long long tam;
		long long checksum;
	};

	struct parteArchivo {
		long long inicio;
		long long fin;
		boolean pedido;  // SE PUEDE QUITAR DE AQUÍ E IMPLEMENTARLO EN EL INTERIOR UNA VEZ GENERADO EL CODIGO
		boolean descargado;  // SE PUEDE QUITAR DE AQUÍ E IMPLEMENTARLO EN EL INTERIOR UNA VEZ GENERADO EL CODIGO
	};

	typedef sequence <parteArchivo> vPartes;

	// Estructura para que los usuarios envíen la información de sus archivos al coordinador.
	struct EstrArchivo {
		infoArchivo info;
		vPartes partes;
	};


	// Secuencia de archivos
	typedef sequence <EstrArchivo> estrArchivos;

	typedef sequence <octet> vByte;

	interface Usuario {
		long getId();
		vByte solicitarParte(in string nombre, in long long inicio, in long long fin);
	};
};

module coordinador {
	//Definición de array de int
	typedef sequence <long> vInt;
	
	// Creado por el coordinador. Mantiene información de los archivos de la red.
	interface Archivo {
		readonly attribute string nombre;
		readonly attribute long long tam;
		readonly attribute long long checksum;

		void insertarSeed(in long id);
		void insertarPeer(in long id, in cliente::vPartes partes);
		void actualizarPartes(in long id, in cliente::vPartes partes);
		void eliminarSeed(in long id);
		void eliminarPeer(in long id);
		vInt getSeeds();
		vInt getPeers();
		cliente::vPartes getPartes(in long id);
	};


	interface Coordinador{
		long conectar(in cliente::estrArchivos eas, in cliente::Usuario usuario);
		void desconectar(in cliente::estrArchivos eas, in long idUsuario);
		void anyadirArchivos(in cliente::estrArchivos eas, in long idUsuario);
		void eliminarArchivos(in cliente::estrArchivos eas, in long idUsuario);
		Archivo buscar(in string nombre);
		cliente::Usuario getUsuario(in long id);
	};
};



